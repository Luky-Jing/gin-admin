// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package app

import (
	"gin-admin/internal/app/api"
	"gin-admin/internal/app/dao/menu"
	"gin-admin/internal/app/dao/role"
	"gin-admin/internal/app/dao/user"
	"gin-admin/internal/app/dao/util"
	"gin-admin/internal/app/module/adapter"
	"gin-admin/internal/app/router"
	"gin-admin/internal/app/service"
)

import (
	_ "gin-admin/internal/app/swagger"
)

// Injectors from wire.go:

func BuildInjector() (*Injector, func(), error) {
	auther, cleanup, err := InitAuth()
	if err != nil {
		return nil, nil, err
	}
	db, cleanup2, err := InitGormDB()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	roleDao := &role.RoleDao{
		DB: db,
	}
	roleMenuDao := &role.RoleMenuDao{
		DB: db,
	}
	menuActionResourceDao := &menu.MenuActionResourceDao{
		DB: db,
	}
	userDao := &user.UserDao{
		DB: db,
	}
	userRoleDao := &user.UserRoleDao{
		DB: db,
	}
	casbinAdapter := &adapter.CasbinAdapter{
		RoleDao:         roleDao,
		RoleMenuDao:     roleMenuDao,
		MenuResourceDao: menuActionResourceDao,
		UserDao:         userDao,
		UserRoleDao:     userRoleDao,
	}
	syncedEnforcer, cleanup3, err := InitCasbin(casbinAdapter)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	menuDao := &menu.MenuDao{
		DB: db,
	}
	menuActionDao := &menu.MenuActionDao{
		DB: db,
	}
	loginSrv := &service.LoginSrv{
		Auth:          auther,
		UserDao:       userDao,
		UserRoleDao:   userRoleDao,
		RoleDao:       roleDao,
		RoleMenuDao:   roleMenuDao,
		MenuDao:       menuDao,
		MenuActionDao: menuActionDao,
	}
	loginAPI := &api.LoginAPI{
		LoginSrv: loginSrv,
	}
	trans := &util.Trans{
		DB: db,
	}
	menuSrv := &service.MenuSrv{
		TransDao:              trans,
		MenuDao:               menuDao,
		MenuActionDao:         menuActionDao,
		MenuActionResourceDao: menuActionResourceDao,
	}
	menuAPI := &api.MenuAPI{
		MenuSrv: menuSrv,
	}
	roleSrv := &service.RoleSrv{
		Enforcer:              syncedEnforcer,
		TransDao:              trans,
		RoleDao:               roleDao,
		RoleMenuDao:           roleMenuDao,
		UserDao:               userDao,
		MenuActionResourceDao: menuActionResourceDao,
	}
	roleAPI := &api.RoleAPI{
		RoleSrv: roleSrv,
	}
	userSrv := &service.UserSrv{
		Enforcer:    syncedEnforcer,
		TransDao:    trans,
		UserDao:     userDao,
		UserRoleDao: userRoleDao,
		RoleDao:     roleDao,
	}
	userAPI := &api.UserAPI{
		UserSrv: userSrv,
	}
	routerRouter := &router.Router{
		Auth:           auther,
		CasbinEnforcer: syncedEnforcer,
		LoginAPI:       loginAPI,
		MenuAPI:        menuAPI,
		RoleAPI:        roleAPI,
		UserAPI:        userAPI,
	}
	engine := InitGinEngine(routerRouter)
	injector := &Injector{
		Engine:         engine,
		Auth:           auther,
		CasbinEnforcer: syncedEnforcer,
		MenuSrv:        menuSrv,
	}
	return injector, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
